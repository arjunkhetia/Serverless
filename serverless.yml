service: serverless

provider:
  name: aws
  stage: api
  region: ap-south-1
  stackName: serverless-stack
  deploymentMethod: changesets
  disableRollback: false
  runtime: nodejs20.x
  memorySize: 128
  timeout: 10
  versionFunctions: false
  deploymentBucket:
    name: ${self:provider.environment.S3_DEPLOY_BUCKET_NAME}
    skipPolicySetup: true
  httpApi:
    cors: true
  apiName: serverless-api
  endpointType: REGIONAL
  iam:
    role: 
      ${file(./config/role.yml):role}
  stackPolicy: 
    ${file(./config/policy.yml):policy}
  tracing:
    apiGateway: true
    lambda: true
  logs:
    ${file(./config/logs.yml):logs}
  environment: ${file(./env/${opt:stage, self:provider.stage}.json)}

resources:
  Resources:
    ${file(./config/resources.yml):resources}

package:
  individually: true
  excludeDevDependencies: true

plugins:
  - serverless-offline

layers:
  ServerlessLayer:
    name: serverless-layer
    path: src/layer
    description: Serverless layer
    compatibleRuntimes:
      - nodejs20.x

functions:
  404ErrorFunction:
    name: 404ErrorFunction-${opt:stage, self:provider.stage}
    handler: src/404-error.handler
    description: 404 Error Handler
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors: true

  UserGetFunction:
    name: UserGetFunction-${opt:stage, self:provider.stage}
    handler: src/user/get.handler
    description: Function to get user information
    events:
      - http:
          path: /user
          method: GET

  UserPostFunction:
    name: UserPostFunction-${opt:stage, self:provider.stage}
    handler: src/user/post.handler
    description: Function to post user information
    events:
      - http:
          path: /user
          method: POST

  ValidateRequestFunction:
    name: ValidateRequestFunction-${opt:stage, self:provider.stage}
    handler: src/validateRequest.handler
    description: Function to validate request body
    events:
      - http:
          path: /validate-request
          method: POST

  JWTAuthorizerFunction:
    name: JWTAuthorizerFunction-${opt:stage, self:provider.stage}
    handler: src/authorizer/jwt.handler
    description: Function to authorize user with JWT

  UserGetWithJWTFunction:
    name: UserGetWithJWTFunction-${opt:stage, self:provider.stage}
    handler: src/user/getWithJWT.handler
    description: Function to get user information with JWT authorization
    events:
      - http:
          path: /user-with-jwt
          method: GET
          authorizer:
            name: JWTAuthorizerFunction
            type: REQUEST

  FileUploadWithS3Function:
    name: FileUploadWithS3Function-${opt:stage, self:provider.stage}
    handler: src/file/uploadWithS3.handler
    description: Function to upload file to S3
    events:
      - http:
          path: /file-upload-s3
          method: POST

  GetFromDataBaseFunction:
    name: GetFromDataBaseFunction-${opt:stage, self:provider.stage}
    handler: src/database/get.handler
    description: Function to get data from database
    events:
      - http:
          path: /get-from-db
          method: GET

  GetDataWithLayerFunction:
    name: GetDataWithLayerFunction-${opt:stage, self:provider.stage}
    handler: src/layerdata/getWithLayer.handler
    description: Function to get data with layer
    layers:
      - { Ref: ServerlessLayerLambdaLayer}
    events:
      - http:
          path: /get-with-layer
          method: GET

  CommonMiddlewareFunction:
    name: CommonMiddlewareFunction-${opt:stage, self:provider.stage}
    handler: src/middleware/commonMiddleware.handler
    description: Common middleware function

  DataWithCommonMiddlewareFunction:
    name: DataWithCoMmonMiddlewareFunction-${opt:stage, self:provider.stage}
    handler: src/data/validatedData.handler
    description: Function to get data with common middleware
    events:
      - http:
          path: /common-middleware
          method: POST

outputs:
  ApiEndpoint:
    description: API Gateway endpoint URL
    value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com"